{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Extra goodies for GEF This is an open repository of external scripts and structures to be used by GEF . As GEF aims to stay a one-file battery-included plugin for GDB, it doesn't allow by nature to be extended with external Python library. GEF-Extras remediates that providing some more extensibility to GEF through: more commands and functions publicly shared structures for the pcustom command more operating system support more file format support Quick start The biggest requirement for GEF-Extras to work is of course GEF . Please refer to GEF documentation to have it set up (spoiler alert: it's pretty easy \ud83d\ude09). Once GEF is up and running, you can install GEF-Extras. Automated installation Execute and run the installation script from GEF repository. $ wget -q -O- https://github.com/hugsy/gef/raw/main/scripts/gef-extras.sh | sh The script will download (via git) GEF-Extras, and set up your ~/.gef.rc file so that you can start straight away. Refer to the installation page for more installation methods. Contribution Through Pull-Requests This repository is open for anyone to contribute! Simply drop a PR with the new command/function/feature. One thing to note, GEF and GEF-Extras have become what they are today thanks to an up-to-date documentation, so considering attaching a simple Markdown file to the docs folder explaining your update. IF your code is complex and/or requires further scrutiny, adding CI tests would also be asked during the review process of your PR. For a complete rundown of the commands/functions GEF allows to use out of the box, check out GEF API page to start writing powerful GDB commands using GEF! As a reward, your Github avatar will be immortalize in the list below of contributors to GEF-Extras Feature requests Well, that's ok! Just create an Issue explaining what cool feature/idea/command you had in mind! Even better, writethe documentation (Markdown format) for your command. It'll make easier forpeople who wants to integrate it! Sponsoring Sponsoring is another way to help projects to thrive. You can sponsor GEF and GEF-Extras by following this link . Happy hacking \ud83c\udf7b","title":"Home"},{"location":"#extra-goodies-for-gef","text":"This is an open repository of external scripts and structures to be used by GEF . As GEF aims to stay a one-file battery-included plugin for GDB, it doesn't allow by nature to be extended with external Python library. GEF-Extras remediates that providing some more extensibility to GEF through: more commands and functions publicly shared structures for the pcustom command more operating system support more file format support","title":"Extra goodies for GEF"},{"location":"#quick-start","text":"The biggest requirement for GEF-Extras to work is of course GEF . Please refer to GEF documentation to have it set up (spoiler alert: it's pretty easy \ud83d\ude09). Once GEF is up and running, you can install GEF-Extras.","title":"Quick start"},{"location":"#automated-installation","text":"Execute and run the installation script from GEF repository. $ wget -q -O- https://github.com/hugsy/gef/raw/main/scripts/gef-extras.sh | sh The script will download (via git) GEF-Extras, and set up your ~/.gef.rc file so that you can start straight away. Refer to the installation page for more installation methods.","title":"Automated installation"},{"location":"#contribution","text":"","title":"Contribution"},{"location":"#through-pull-requests","text":"This repository is open for anyone to contribute! Simply drop a PR with the new command/function/feature. One thing to note, GEF and GEF-Extras have become what they are today thanks to an up-to-date documentation, so considering attaching a simple Markdown file to the docs folder explaining your update. IF your code is complex and/or requires further scrutiny, adding CI tests would also be asked during the review process of your PR. For a complete rundown of the commands/functions GEF allows to use out of the box, check out GEF API page to start writing powerful GDB commands using GEF! As a reward, your Github avatar will be immortalize in the list below of contributors to GEF-Extras","title":"Through Pull-Requests"},{"location":"#feature-requests","text":"Well, that's ok! Just create an Issue explaining what cool feature/idea/command you had in mind! Even better, writethe documentation (Markdown format) for your command. It'll make easier forpeople who wants to integrate it!","title":"Feature requests"},{"location":"#sponsoring","text":"Sponsoring is another way to help projects to thrive. You can sponsor GEF and GEF-Extras by following this link .","title":"Sponsoring"},{"location":"#happy-hacking","text":"","title":"Happy hacking \ud83c\udf7b"},{"location":"install/","text":"Installing GEF-Extras Prerequisites GDB Only GDB 8 and higher is required. It must be compiled with Python 3.6 or higher support. For most people, simply using your distribution package manager should be enough. GEF will then only work for Python 3. If you absolutely require GDB + Python 2, please use GEF-Legacy instead. Note that gef-legacy won't provide new features, and only functional bugs will be handled. You can verify it with the following command: $ gdb -nx -ex 'pi print(sys.version)' -ex quit This should display your version of Python compiled with gdb . $ gdb -nx -ex 'pi print(sys.version)' -ex quit 3.6.9 (default, Nov 7 2019, 10:44:02) [GCC 8.3.0] GEF For a quick installation of GEF, you can get started with the following commands: # via the install script ## using curl $ bash -c \"$(curl -fsSL https://gef.blah.cat/sh)\" ## using wget $ bash -c \"$(wget https://gef.blah.cat/sh -O -)\" For more advanced installation methods, refer the installation chapter of the GEF documentation . Python dependencies Because GEF-Extras allows external dependencies, you must make sure to have the adequate Python libraries installed before you can use the features. Thankfully this is easily done in Python, as such: wget -O /tmp/requirements.txt https://raw.githubusercontent.com/hugsy/gef-extras/dev/requirements.txt python -m pip install --user --upgrade /tmp/requirements.txt Installation using Git Start with cloning this repo: $ git clone https://github.com/hugsy/gef-extras Add the path to the external scripts to GEF's config: gef\u27a4 gef config gef.extra_plugins_dir /path/to/gef-extras/scripts And same for the structures (to be used by pcustom command ): gef\u27a4 gef config pcustom.struct_path /path/to/gef-extras/structs And for the syscall tables: gef\u27a4 gef config syscall-args.path /path/to/gef-extras/syscall-tables And finally for the glibc function call args definition: gef\u27a4 gef config context.libc_args True gef\u27a4 gef config context.libc_args_path /path/to/gef-extras/glibc-function-args Check out the complete documentation on libc argument support. Now run and enjoy all the fun! Note that it is possible to specify multiple directories, separating the paths with a semi-colon: gef\u27a4 gef config gef.extra_plugins_dir /path/to/dir1;/path/to/dir2 And don't forget to save your settings. gef\u27a4 gef save","title":"Installation"},{"location":"install/#installing-gef-extras","text":"","title":"Installing GEF-Extras"},{"location":"install/#prerequisites","text":"","title":"Prerequisites"},{"location":"install/#gdb","text":"Only GDB 8 and higher is required. It must be compiled with Python 3.6 or higher support. For most people, simply using your distribution package manager should be enough. GEF will then only work for Python 3. If you absolutely require GDB + Python 2, please use GEF-Legacy instead. Note that gef-legacy won't provide new features, and only functional bugs will be handled. You can verify it with the following command: $ gdb -nx -ex 'pi print(sys.version)' -ex quit This should display your version of Python compiled with gdb . $ gdb -nx -ex 'pi print(sys.version)' -ex quit 3.6.9 (default, Nov 7 2019, 10:44:02) [GCC 8.3.0]","title":"GDB"},{"location":"install/#gef","text":"For a quick installation of GEF, you can get started with the following commands: # via the install script ## using curl $ bash -c \"$(curl -fsSL https://gef.blah.cat/sh)\" ## using wget $ bash -c \"$(wget https://gef.blah.cat/sh -O -)\" For more advanced installation methods, refer the installation chapter of the GEF documentation .","title":"GEF"},{"location":"install/#python-dependencies","text":"Because GEF-Extras allows external dependencies, you must make sure to have the adequate Python libraries installed before you can use the features. Thankfully this is easily done in Python, as such: wget -O /tmp/requirements.txt https://raw.githubusercontent.com/hugsy/gef-extras/dev/requirements.txt python -m pip install --user --upgrade /tmp/requirements.txt","title":"Python dependencies"},{"location":"install/#installation-using-git","text":"Start with cloning this repo: $ git clone https://github.com/hugsy/gef-extras Add the path to the external scripts to GEF's config: gef\u27a4 gef config gef.extra_plugins_dir /path/to/gef-extras/scripts And same for the structures (to be used by pcustom command ): gef\u27a4 gef config pcustom.struct_path /path/to/gef-extras/structs And for the syscall tables: gef\u27a4 gef config syscall-args.path /path/to/gef-extras/syscall-tables And finally for the glibc function call args definition: gef\u27a4 gef config context.libc_args True gef\u27a4 gef config context.libc_args_path /path/to/gef-extras/glibc-function-args Check out the complete documentation on libc argument support. Now run and enjoy all the fun! Note that it is possible to specify multiple directories, separating the paths with a semi-colon: gef\u27a4 gef config gef.extra_plugins_dir /path/to/dir1;/path/to/dir2 And don't forget to save your settings. gef\u27a4 gef save","title":"Installation using Git"},{"location":"commands/assemble/","text":"Command assemble If you have installed keystone , then gef will provide a convenient command to assemble native instructions directly to opcodes of the architecture you are currently debugging. Call it via assemble or its alias asm : gef\u27a4 asm [INSTRUCTION [; INSTRUCTION ...]] By setting the --arch ARCH and --mode MODE the target platform for the assembly can be changed. Available architectures and modes can be displayed with --list-archs . gef\u27a4 asm --list-archs Available architectures/modes (with endianness): - ARM * ARM (little, big) * THUMB (little, big) * ARMV8 (little, big) * THUMBV8 (little, big) - ARM64 * AARCH64 (little) - MIPS * MIPS32 (little, big) * MIPS64 (little, big) - PPC * PPC32 (big) * PPC64 (little, big) - SPARC * SPARC32 (little, big) * SPARC64 (big) - SYSTEMZ * SYSTEMZ (little, big) - X86 * 16 (little) * 32 (little) * 64 (little) gef\u27a4 asm --arch x86 --mode 32 [INSTRUCTION [; INSTRUCTION ...]] gef\u27a4 asm --arch arm [INSTRUCTION [; INSTRUCTION ...]] To choose the endianness use --endian ENDIANNESS (by default, little ): gef\u27a4 asm --endian big [INSTRUCTION [; INSTRUCTION ...]] Using the --overwrite-location LOCATION option, gef will write the assembly code generated by keystone directly to the memory location specified. This makes it extremely convenient to simply overwrite opcodes. Another convenient option is --as-shellcode which outputs the generated shellcode as an escaped python string. It can then easily be used in your python scripts.","title":"assemble"},{"location":"commands/assemble/#command-assemble","text":"If you have installed keystone , then gef will provide a convenient command to assemble native instructions directly to opcodes of the architecture you are currently debugging. Call it via assemble or its alias asm : gef\u27a4 asm [INSTRUCTION [; INSTRUCTION ...]] By setting the --arch ARCH and --mode MODE the target platform for the assembly can be changed. Available architectures and modes can be displayed with --list-archs . gef\u27a4 asm --list-archs Available architectures/modes (with endianness): - ARM * ARM (little, big) * THUMB (little, big) * ARMV8 (little, big) * THUMBV8 (little, big) - ARM64 * AARCH64 (little) - MIPS * MIPS32 (little, big) * MIPS64 (little, big) - PPC * PPC32 (big) * PPC64 (little, big) - SPARC * SPARC32 (little, big) * SPARC64 (big) - SYSTEMZ * SYSTEMZ (little, big) - X86 * 16 (little) * 32 (little) * 64 (little) gef\u27a4 asm --arch x86 --mode 32 [INSTRUCTION [; INSTRUCTION ...]] gef\u27a4 asm --arch arm [INSTRUCTION [; INSTRUCTION ...]] To choose the endianness use --endian ENDIANNESS (by default, little ): gef\u27a4 asm --endian big [INSTRUCTION [; INSTRUCTION ...]] Using the --overwrite-location LOCATION option, gef will write the assembly code generated by keystone directly to the memory location specified. This makes it extremely convenient to simply overwrite opcodes. Another convenient option is --as-shellcode which outputs the generated shellcode as an escaped python string. It can then easily be used in your python scripts.","title":"Command assemble"},{"location":"commands/bincompare/","text":"Command bincompare The bincompare command will compare a provided binary file with process memory in order to find differences between the two. bincompare requires args: -f (for file ) - the full path of binary file to be compared. -a (for address ) - the memory address to be compared with the file data. You can use the bytearray command to generate the binary file. Example without badchars: gef\u27a4 bincompare -f bytearray.bin -a 0x56557008 [+] Comparison result: +-----------------------------------------------+ 00 |00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f| file | | memory 10 |10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f| file | | memory 20 |20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f| file | | memory 30 |30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f| file | | memory 40 |40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f| file | | memory 50 |50 51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f| file | | memory 60 |60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f| file | | memory 70 |70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f| file | | memory 80 |80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f| file | | memory 90 |90 91 92 93 94 95 96 97 98 99 9a 9b 9c 9d 9e 9f| file | | memory a0 |a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 aa ab ac ad ae af| file | | memory b0 |b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba bb bc bd be bf| file | | memory c0 |c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc cd ce cf| file | | memory d0 |d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 da db dc dd de df| file | | memory e0 |e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef| file | | memory f0 |f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 fa fb fc fd fe ff| file | | memory +-----------------------------------------------+ [+] No badchars found! Example with badchars and no truncateed buffer: gef\u27a4 bincompare -f bytearray.bin -a 0x56557008 [+] Comparison result: +-----------------------------------------------+ 00 |00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f| file | 10 | memory 10 |10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f| file | 10| memory 20 |20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f| file | | memory 30 |30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f| file | 2f| memory 40 |40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f| file | | memory 50 |50 51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f| file | | memory 60 |60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f| file | | memory 70 |70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f| file | | memory 80 |80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f| file | | memory 90 |90 91 92 93 94 95 96 97 98 99 9a 9b 9c 9d 9e 9f| file | | memory a0 |a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 aa ab ac ad ae af| file | | memory b0 |b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba bb bc bd be bf| file | | memory c0 |c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc cd ce cf| file | | memory d0 |d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 da db dc dd de df| file | | memory e0 |e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef| file | | memory f0 |f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 fa fb fc fd fe ff| file | | memory +-----------------------------------------------+ [+] Badchars found: 05, 1f, 3f Example with badchars and truncated buffer: gef\u27a4 bincompare -f bytearray.bin -a 0x56557008 [+] Comparison result: +-----------------------------------------------+ 00 |00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f| file | 10 | memory 10 |10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f| file | 10| memory 20 |20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f| file | | memory 30 |30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f| file | 2f| memory 40 |40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f| file | 00 00 01 1b 03 3b 38 00 00 00 06 00 00 00| memory 50 |50 51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f| file |d4 ef ff ff 80 00 00 00 f4 ef ff ff a4 00 00 00| memory 60 |60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f| file |04 f0 ff ff 54 00 00 00 74 f1 ff ff b8 00 00 00| memory 70 |70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f| file |d4 f1 ff ff 04 01 00 00 d5 f1 ff ff 18 01 00 00| memory 80 |80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f| file |14 00 00 00 00 00 00 00 01 7a 52 00 01 7c 08 01| memory 90 |90 91 92 93 94 95 96 97 98 99 9a 9b 9c 9d 9e 9f| file |1b 0c 04 04 88 01 07 08 10 00 00 00 1c 00 00 00| memory a0 |a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 aa ab ac ad ae af| file |a8 ef ff ff 36 00 00 00 00 00 00 00 14 00 00 00| memory b0 |b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba bb bc bd be bf| file |00 00 00 00 01 7a 52 00 01 7c 08 01 1b 0c 04 04| memory c0 |c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc cd ce cf| file |88 01 00 00 20 00 00 00 1c 00 00 00 4c ef ff ff| memory d0 |d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 da db dc dd de df| file |20 00 00 00 00 0e 08 46 0e 0c 4a 0f 0b 74 04 78| memory e0 |e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef| file |00 3f 1a 3b 2a 32 24 22 10 00 00 00 40 00 00 00| memory f0 |f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 fa fb fc fd fe ff| file |48 ef ff ff 08 00 00 00 00 00 00 00 48 00 00 00| memory +-----------------------------------------------+ [+] Corruption after 66 bytes [+] Badchars found: 05, 1f, 3f, 42, 43, 44, 45, 46, 47, 48, 49, 4a, 4b, 4c, 4d, 4e, 4f, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 5a, 5b, 5c, 5d, 5e, 5f, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 6a, 6b, 6c, 6d, 6e, 6f, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 7a, 7b, 7c, 7d, 7e, 7f, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 8a, 8b, 8c, 8d, 8e, 8f, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 9a, 9b, 9c, 9d, 9e, 9f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, aa, ab, ac, ad, ae, af, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb, bc, bd, be, bf, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, ca, cb, cc, cd, ce, cf, d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, da, db, dc, dd, de, df, e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, ea, eb, ec, ed, ee, ef, f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, fa, fb, fc, fd, fe, ff","title":"bincompare"},{"location":"commands/bincompare/#command-bincompare","text":"The bincompare command will compare a provided binary file with process memory in order to find differences between the two. bincompare requires args: -f (for file ) - the full path of binary file to be compared. -a (for address ) - the memory address to be compared with the file data. You can use the bytearray command to generate the binary file. Example without badchars: gef\u27a4 bincompare -f bytearray.bin -a 0x56557008 [+] Comparison result: +-----------------------------------------------+ 00 |00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f| file | | memory 10 |10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f| file | | memory 20 |20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f| file | | memory 30 |30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f| file | | memory 40 |40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f| file | | memory 50 |50 51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f| file | | memory 60 |60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f| file | | memory 70 |70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f| file | | memory 80 |80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f| file | | memory 90 |90 91 92 93 94 95 96 97 98 99 9a 9b 9c 9d 9e 9f| file | | memory a0 |a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 aa ab ac ad ae af| file | | memory b0 |b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba bb bc bd be bf| file | | memory c0 |c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc cd ce cf| file | | memory d0 |d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 da db dc dd de df| file | | memory e0 |e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef| file | | memory f0 |f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 fa fb fc fd fe ff| file | | memory +-----------------------------------------------+ [+] No badchars found! Example with badchars and no truncateed buffer: gef\u27a4 bincompare -f bytearray.bin -a 0x56557008 [+] Comparison result: +-----------------------------------------------+ 00 |00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f| file | 10 | memory 10 |10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f| file | 10| memory 20 |20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f| file | | memory 30 |30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f| file | 2f| memory 40 |40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f| file | | memory 50 |50 51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f| file | | memory 60 |60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f| file | | memory 70 |70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f| file | | memory 80 |80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f| file | | memory 90 |90 91 92 93 94 95 96 97 98 99 9a 9b 9c 9d 9e 9f| file | | memory a0 |a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 aa ab ac ad ae af| file | | memory b0 |b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba bb bc bd be bf| file | | memory c0 |c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc cd ce cf| file | | memory d0 |d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 da db dc dd de df| file | | memory e0 |e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef| file | | memory f0 |f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 fa fb fc fd fe ff| file | | memory +-----------------------------------------------+ [+] Badchars found: 05, 1f, 3f Example with badchars and truncated buffer: gef\u27a4 bincompare -f bytearray.bin -a 0x56557008 [+] Comparison result: +-----------------------------------------------+ 00 |00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f| file | 10 | memory 10 |10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f| file | 10| memory 20 |20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f| file | | memory 30 |30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f| file | 2f| memory 40 |40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f| file | 00 00 01 1b 03 3b 38 00 00 00 06 00 00 00| memory 50 |50 51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f| file |d4 ef ff ff 80 00 00 00 f4 ef ff ff a4 00 00 00| memory 60 |60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f| file |04 f0 ff ff 54 00 00 00 74 f1 ff ff b8 00 00 00| memory 70 |70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f| file |d4 f1 ff ff 04 01 00 00 d5 f1 ff ff 18 01 00 00| memory 80 |80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f| file |14 00 00 00 00 00 00 00 01 7a 52 00 01 7c 08 01| memory 90 |90 91 92 93 94 95 96 97 98 99 9a 9b 9c 9d 9e 9f| file |1b 0c 04 04 88 01 07 08 10 00 00 00 1c 00 00 00| memory a0 |a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 aa ab ac ad ae af| file |a8 ef ff ff 36 00 00 00 00 00 00 00 14 00 00 00| memory b0 |b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba bb bc bd be bf| file |00 00 00 00 01 7a 52 00 01 7c 08 01 1b 0c 04 04| memory c0 |c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc cd ce cf| file |88 01 00 00 20 00 00 00 1c 00 00 00 4c ef ff ff| memory d0 |d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 da db dc dd de df| file |20 00 00 00 00 0e 08 46 0e 0c 4a 0f 0b 74 04 78| memory e0 |e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef| file |00 3f 1a 3b 2a 32 24 22 10 00 00 00 40 00 00 00| memory f0 |f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 fa fb fc fd fe ff| file |48 ef ff ff 08 00 00 00 00 00 00 00 48 00 00 00| memory +-----------------------------------------------+ [+] Corruption after 66 bytes [+] Badchars found: 05, 1f, 3f, 42, 43, 44, 45, 46, 47, 48, 49, 4a, 4b, 4c, 4d, 4e, 4f, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 5a, 5b, 5c, 5d, 5e, 5f, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 6a, 6b, 6c, 6d, 6e, 6f, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 7a, 7b, 7c, 7d, 7e, 7f, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 8a, 8b, 8c, 8d, 8e, 8f, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 9a, 9b, 9c, 9d, 9e, 9f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, aa, ab, ac, ad, ae, af, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb, bc, bd, be, bf, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, ca, cb, cc, cd, ce, cf, d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, da, db, dc, dd, de, df, e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, ea, eb, ec, ed, ee, ef, f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, fa, fb, fc, fd, fe, ff","title":"Command bincompare"},{"location":"commands/bytearray/","text":"Command bytearray The bytearray generate a binary with data between 0x01 and 0xff. In general the created file is used to compare (using the bincompare command) with a memory data in order to check badchars. bytearray also accepts one option: -b (for badchar ) will exclude the bytes to generated byte array. Example without excluding bytes: gef\u27a4 bytearray [+] Generating table, excluding 0 bad chars... [+] Dumping table to file \"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\" \"\\x20\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\" \"\\x40\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\" \"\\x60\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\" \"\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\" \"\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\" \"\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\" \"\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\" [+] Done, wrote 256 bytes to file bytearray.txt [+] Binary output saved in bytearray.bin Example excluding bytes (0x00, 0x0a and 0x0d): gef\u27a4 bytearray -b \"\\x00\\x0a\\x0d\" [+] Generating table, excluding 3 bad chars... [+] Dumping table to file \"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0b\\x0c\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\\x21\\x22\" \"\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\\x41\\x42\" \"\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60\\x61\\x62\" \"\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80\\x81\\x82\" \"\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\" \"\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\" \"\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\" \"\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\" [+] Done, wrote 253 bytes to file bytearray.txt [+] Binary output saved in bytearray.bin","title":"bytearray"},{"location":"commands/bytearray/#command-bytearray","text":"The bytearray generate a binary with data between 0x01 and 0xff. In general the created file is used to compare (using the bincompare command) with a memory data in order to check badchars. bytearray also accepts one option: -b (for badchar ) will exclude the bytes to generated byte array. Example without excluding bytes: gef\u27a4 bytearray [+] Generating table, excluding 0 bad chars... [+] Dumping table to file \"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\" \"\\x20\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\" \"\\x40\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\" \"\\x60\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\" \"\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\" \"\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\" \"\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\" \"\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\" [+] Done, wrote 256 bytes to file bytearray.txt [+] Binary output saved in bytearray.bin Example excluding bytes (0x00, 0x0a and 0x0d): gef\u27a4 bytearray -b \"\\x00\\x0a\\x0d\" [+] Generating table, excluding 3 bad chars... [+] Dumping table to file \"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0b\\x0c\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\\x21\\x22\" \"\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\\x41\\x42\" \"\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60\\x61\\x62\" \"\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80\\x81\\x82\" \"\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\" \"\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\" \"\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\" \"\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\" [+] Done, wrote 253 bytes to file bytearray.txt [+] Binary output saved in bytearray.bin","title":"Command bytearray"},{"location":"commands/capstone-disassemble/","text":"Command capstone-disassemble If you have installed the capstone library and its Python bindings, you can use it to disassemble any memory in your debugging session. This plugin was created to offer an alternative to GDB 's disassemble function which sometimes gets things mixed up. You can use its alias cs-disassemble or just cs with the location to disassemble at. If not specified, it will use $pc . gef\u27a4 cs main+0x10 Disassemble more instructions gef\u27a4 cs --length 20 Show opcodes next to disassembly gef\u27a4 cs --show-opcodes","title":"capstone"},{"location":"commands/capstone-disassemble/#command-capstone-disassemble","text":"If you have installed the capstone library and its Python bindings, you can use it to disassemble any memory in your debugging session. This plugin was created to offer an alternative to GDB 's disassemble function which sometimes gets things mixed up. You can use its alias cs-disassemble or just cs with the location to disassemble at. If not specified, it will use $pc . gef\u27a4 cs main+0x10 Disassemble more instructions gef\u27a4 cs --length 20 Show opcodes next to disassembly gef\u27a4 cs --show-opcodes","title":"Command capstone-disassemble"},{"location":"commands/error/","text":"error A basic equivalent to WinDbg !error command. If a debugging session is active, error can be used with no argument: the command will use the return_register of the current architecture associated to the binary. [ Legend: Modified register | Code | Heap | Stack | String ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 registers \u2500\u2500\u2500\u2500 $rax : 0x1 [...] gef\u27a4 error 1 (0x1) : Operation not permitted Otherwise, an argument is expected: this argument can be a debugging symbol (for instance a register) or the integer holding the error code to translate: gef\u27a4 error 42 42 (0x2a) : No message of desired type gef\u27a4 eq $sp 0x1337 gef\u27a4 error *(int*)$sp 4919 (0x1337) : Unknown error 4919","title":"error"},{"location":"commands/error/#error","text":"A basic equivalent to WinDbg !error command. If a debugging session is active, error can be used with no argument: the command will use the return_register of the current architecture associated to the binary. [ Legend: Modified register | Code | Heap | Stack | String ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 registers \u2500\u2500\u2500\u2500 $rax : 0x1 [...] gef\u27a4 error 1 (0x1) : Operation not permitted Otherwise, an argument is expected: this argument can be a debugging symbol (for instance a register) or the integer holding the error code to translate: gef\u27a4 error 42 42 (0x2a) : No message of desired type gef\u27a4 eq $sp 0x1337 gef\u27a4 error *(int*)$sp 4919 (0x1337) : Unknown error 4919","title":"error"},{"location":"commands/ftrace/","text":"Command ftrace A quick'n dirty function tracer scripts for GEF. To use: gef\u27a4 ftrace <function_name1>,<num_of_args> <function_name2>,<num_of_args> ... Example: gef\u27a4 ftrace malloc,1 calloc,2 free,1","title":"ftrace"},{"location":"commands/ftrace/#command-ftrace","text":"A quick'n dirty function tracer scripts for GEF. To use: gef\u27a4 ftrace <function_name1>,<num_of_args> <function_name2>,<num_of_args> ... Example: gef\u27a4 ftrace malloc,1 calloc,2 free,1","title":"Command ftrace"},{"location":"commands/glibc_function_args/","text":"glibc function call arguments definition This tree holds json used to print better definition of glibc function arguments. Arguments' definitions are taken from glibc manual, and can be used as a kind reminder. For example, the arguments for a read@plt would currently look like this: but using this feature, it will instead look like this: Functions are detected if they end with @plt , which means that static binaries won't benefit from this. User has to set two context configurations: * context.libc_args : boolean, set to True to use this feature * context.libc_args_path : string, must be set to the directory where the libc definition json files can be found The script generate_glibc_args_json.py is used to create provided json files. It works by parsing glibc manual text, can be downloaded from https://www.gnu.org/software/libc/manual/text/libc.txt.gz and saved in the current directory.","title":"Glibc function args"},{"location":"commands/glibc_function_args/#glibc-function-call-arguments-definition","text":"This tree holds json used to print better definition of glibc function arguments. Arguments' definitions are taken from glibc manual, and can be used as a kind reminder. For example, the arguments for a read@plt would currently look like this: but using this feature, it will instead look like this: Functions are detected if they end with @plt , which means that static binaries won't benefit from this. User has to set two context configurations: * context.libc_args : boolean, set to True to use this feature * context.libc_args_path : string, must be set to the directory where the libc definition json files can be found The script generate_glibc_args_json.py is used to create provided json files. It works by parsing glibc manual text, can be downloaded from https://www.gnu.org/software/libc/manual/text/libc.txt.gz and saved in the current directory.","title":"glibc function call arguments definition"},{"location":"commands/ida-rpyc/","text":"Command ida-interact gef provides a simple XML-RPC client designed to communicate with a server running inside a specific IDA Python plugin, called ida_gef.py . Simply download this script, and run it inside IDA. When the server is running, you should see some output: [+] Creating new thread for XMLRPC server: Thread-1 [+] Starting XMLRPC server: 0.0.0.0:1337 [+] Registered 12 functions. This indicates that IDA is ready to work with gef ! gef can interact with it via the command ida-interact (alias ida ). This command expects the name of the function to execute as the first argument, all the other arguments are the arguments of the remote function. To enumerate the functions available, simply run gef\u27a4 ida-interact -h Now, to execute an RPC, invoke the command ida-interact on the desired method, with its arguments (if required). For example: gef\u27a4 ida setcolor 0x40061E will edit the remote IDB and set the background color of the location 0x40061E with the color 0x005500 (default value). Another convenient example is to add comment inside IDA directly from gef : gef\u27a4 ida makecomm 0x40060C \"<<<--- stack overflow\" [+] Success Result: Please use the -h argument to see all the methods available and their syntax. It is also note-worthy that Binary Ninja support has be added: , by using the Binary Ninja plugin gef-binja.py .","title":"ida-rpyc"},{"location":"commands/ida-rpyc/#command-ida-interact","text":"gef provides a simple XML-RPC client designed to communicate with a server running inside a specific IDA Python plugin, called ida_gef.py . Simply download this script, and run it inside IDA. When the server is running, you should see some output: [+] Creating new thread for XMLRPC server: Thread-1 [+] Starting XMLRPC server: 0.0.0.0:1337 [+] Registered 12 functions. This indicates that IDA is ready to work with gef ! gef can interact with it via the command ida-interact (alias ida ). This command expects the name of the function to execute as the first argument, all the other arguments are the arguments of the remote function. To enumerate the functions available, simply run gef\u27a4 ida-interact -h Now, to execute an RPC, invoke the command ida-interact on the desired method, with its arguments (if required). For example: gef\u27a4 ida setcolor 0x40061E will edit the remote IDB and set the background color of the location 0x40061E with the color 0x005500 (default value). Another convenient example is to add comment inside IDA directly from gef : gef\u27a4 ida makecomm 0x40060C \"<<<--- stack overflow\" [+] Success Result: Please use the -h argument to see all the methods available and their syntax. It is also note-worthy that Binary Ninja support has be added: , by using the Binary Ninja plugin gef-binja.py .","title":"Command ida-interact"},{"location":"commands/peekpointers/","text":"Command peekpointers Author : bkth This command helps find pointers belonging to other memory regions helpful in case of OOB Read when looking for specific pointers Syntax: gef\u27a4 peek-pointers LOCATION [section-name] Examples: gef\u27a4 peek-pointers 0x55555575c000 cat pointer at 0x55555575c008, value 0x55555575c008 [stack] pointer at 0x55555575c0c0, value 0x7fffffffe497 libc-2.24.so pointer at 0x55555575c0c8, value 0x7ffff7dd2600 <_IO_2_1_stdout_> [heap] pointer at 0x55555575d038, value 0x55555575d010 locale-archive pointer at 0x55555575d0b8, value 0x7ffff774e5c0 Could not read from address 0x55555577e000, stopping. gef\u27a4 peek-pointers 0x55555575c000 libc-2.24.so libc-2.24.so pointer at 0x55555575c0c8, value 0x7ffff7dd2600 <_IO_2_1_stdout_> gef\u27a4 peek-pointers 0x55555575c000 libc-2.24.so all libc-2.24.so pointer at 0x55555575c0c8, value 0x7ffff7dd2600 <_IO_2_1_stdout_> libc-2.24.so pointer at 0x55555575c0e0, value 0x7ffff7dd2520 <_IO_2_1_stderr_> libc-2.24.so pointer at 0x55555575dfe8, value 0x7ffff7ba1b40 <_nl_default_dirname> Could not read from address 0x55555577e000, stopping.","title":"peekpointers"},{"location":"commands/peekpointers/#command-peekpointers","text":"Author : bkth This command helps find pointers belonging to other memory regions helpful in case of OOB Read when looking for specific pointers Syntax: gef\u27a4 peek-pointers LOCATION [section-name] Examples: gef\u27a4 peek-pointers 0x55555575c000 cat pointer at 0x55555575c008, value 0x55555575c008 [stack] pointer at 0x55555575c0c0, value 0x7fffffffe497 libc-2.24.so pointer at 0x55555575c0c8, value 0x7ffff7dd2600 <_IO_2_1_stdout_> [heap] pointer at 0x55555575d038, value 0x55555575d010 locale-archive pointer at 0x55555575d0b8, value 0x7ffff774e5c0 Could not read from address 0x55555577e000, stopping. gef\u27a4 peek-pointers 0x55555575c000 libc-2.24.so libc-2.24.so pointer at 0x55555575c0c8, value 0x7ffff7dd2600 <_IO_2_1_stdout_> gef\u27a4 peek-pointers 0x55555575c000 libc-2.24.so all libc-2.24.so pointer at 0x55555575c0c8, value 0x7ffff7dd2600 <_IO_2_1_stdout_> libc-2.24.so pointer at 0x55555575c0e0, value 0x7ffff7dd2520 <_IO_2_1_stderr_> libc-2.24.so pointer at 0x55555575dfe8, value 0x7ffff7ba1b40 <_nl_default_dirname> Could not read from address 0x55555577e000, stopping.","title":"Command peekpointers"},{"location":"commands/retdec/","text":"Command retdec gef uses the RetDec decompiler (https://github.com/avast/retdec) to decompile parts of or entire binary. The command, retdec , also has a default alias, decompile to make it easier to remember. To use the command, you need to provide gef the path to a retdec installation. The compiled source can be found on the releases page. cd /opt wget https://github.com/avast/retdec/releases/download/v4.0/retdec-v4.0-ubuntu-64b.tar.xz tar xvf retdec-v4.0-ubuntu-64b.tar.xz Then enter the path the gef config command: gef\u27a4 gef config retdec.retdec_path /opt/retdec You can have gef save this path by saving the current configuration settings. gef\u27a4 gef save retdec can be used in 3 modes: By providing the option -a , gef will submit the entire binary being debugged to RetDec. For example, gef\u27a4 decompile -a By providing the option -r START:END , gef will submit only the raw bytes contained within the range specified as argument. By providing the option -s SYMBOL , gef will attempt to reach a specific function symbol, dump the function in a temporary file, and submit it to RetDec. For example, gef\u27a4 decompile -s main Syntax Highlighting Retdec now supports syntax highlighting for all C decompilations with the use of Pygments. Available themes can be found here . You can change themes by running gef config retdec.theme THEME_NAME gef save # remember to save your config!","title":"retdec"},{"location":"commands/retdec/#command-retdec","text":"gef uses the RetDec decompiler (https://github.com/avast/retdec) to decompile parts of or entire binary. The command, retdec , also has a default alias, decompile to make it easier to remember. To use the command, you need to provide gef the path to a retdec installation. The compiled source can be found on the releases page. cd /opt wget https://github.com/avast/retdec/releases/download/v4.0/retdec-v4.0-ubuntu-64b.tar.xz tar xvf retdec-v4.0-ubuntu-64b.tar.xz Then enter the path the gef config command: gef\u27a4 gef config retdec.retdec_path /opt/retdec You can have gef save this path by saving the current configuration settings. gef\u27a4 gef save retdec can be used in 3 modes: By providing the option -a , gef will submit the entire binary being debugged to RetDec. For example, gef\u27a4 decompile -a By providing the option -r START:END , gef will submit only the raw bytes contained within the range specified as argument. By providing the option -s SYMBOL , gef will attempt to reach a specific function symbol, dump the function in a temporary file, and submit it to RetDec. For example, gef\u27a4 decompile -s main","title":"Command retdec"},{"location":"commands/retdec/#syntax-highlighting","text":"Retdec now supports syntax highlighting for all C decompilations with the use of Pygments. Available themes can be found here . You can change themes by running gef config retdec.theme THEME_NAME gef save # remember to save your config!","title":"Syntax Highlighting"},{"location":"commands/ropper/","text":"Command ropper ropper is a gadget finding tool, easily installable via pip . It provides a very convenient --search function to search gadgets from a regular expression: ropper comes with a full set of options, all documented from the --help menu.","title":"ropper"},{"location":"commands/ropper/#command-ropper","text":"ropper is a gadget finding tool, easily installable via pip . It provides a very convenient --search function to search gadgets from a regular expression: ropper comes with a full set of options, all documented from the --help menu.","title":"Command ropper"},{"location":"commands/set-permission/","text":"Command set-permission This command was added to facilitate the exploitation process, by changing the permissions on a specific memory page directly from the debugger. By default, GDB does not allow you to do that, so the command will modify a code section of the binary being debugged, and add a native mprotect syscall stub. For example, for x86, the following stub will be inserted: pushad pushfd mov eax, mprotect_syscall_num mov ebx, address_of_the_page mov ecx, size_of_the_page mov edx, permission_to_set int 0x80 popfd popad A breakpoint is added following this stub, which when hit will restore the original context, allowing you to resume execution. The usage is gef\u27a4 set-permission address [permission] The permission can be set using a bitmask as integer with read (1), write (2) and execute (4). For combinations of these permissions they can just be added: Read and Execute permission would be 1 + 4 = 5. mprotect is an alias for set-permission . As an example, to set the stack as READ|WRITE|EXECUTE on this binary, Simply run gef\u27a4 mprotect 0xfffdd000 Et voil\u00e0! GEF will use the memory runtime information to correctly adjust the permissions of the entire section. Or for a full demo video on an AARCH64 VM:","title":"set-permission"},{"location":"commands/set-permission/#command-set-permission","text":"This command was added to facilitate the exploitation process, by changing the permissions on a specific memory page directly from the debugger. By default, GDB does not allow you to do that, so the command will modify a code section of the binary being debugged, and add a native mprotect syscall stub. For example, for x86, the following stub will be inserted: pushad pushfd mov eax, mprotect_syscall_num mov ebx, address_of_the_page mov ecx, size_of_the_page mov edx, permission_to_set int 0x80 popfd popad A breakpoint is added following this stub, which when hit will restore the original context, allowing you to resume execution. The usage is gef\u27a4 set-permission address [permission] The permission can be set using a bitmask as integer with read (1), write (2) and execute (4). For combinations of these permissions they can just be added: Read and Execute permission would be 1 + 4 = 5. mprotect is an alias for set-permission . As an example, to set the stack as READ|WRITE|EXECUTE on this binary, Simply run gef\u27a4 mprotect 0xfffdd000 Et voil\u00e0! GEF will use the memory runtime information to correctly adjust the permissions of the entire section. Or for a full demo video on an AARCH64 VM:","title":"Command set-permission"},{"location":"commands/skel/","text":"Command skel skel prepares quickly a pwntools based exploit template for both local and remote targets, based on the currently debugged file. How-To use With a local target gef\u27a4 skel local With a remote target gef\u27a4 skel remote=TARGET:PORT","title":"exploit-template"},{"location":"commands/skel/#command-skel","text":"skel prepares quickly a pwntools based exploit template for both local and remote targets, based on the currently debugged file.","title":"Command skel"},{"location":"commands/skel/#how-to-use","text":"","title":"How-To use"},{"location":"commands/skel/#with-a-local-target","text":"gef\u27a4 skel local","title":"With a local target"},{"location":"commands/skel/#with-a-remote-target","text":"gef\u27a4 skel remote=TARGET:PORT","title":"With a remote target"},{"location":"commands/unicorn-emulate/","text":"Command unicorn-emulate If you have installed unicorn emulation engine and its Python bindings, GEF integrates a new command to emulate instructions of your current debugging context ! This unicorn-emulate command (or its alias emu ) will replicate the current memory mapping (including the page permissions) for you, and by default (i.e. without any additional argument), it will emulate the execution of the instruction about to be executed (i.e. the one pointed by $pc ). Furthermore the command will print out the state of the registers before and after the emulation. Use -h for help: gef\u27a4 emu -h For example, the following command will emulate only the next 2 instructions: gef\u27a4 emu 2 And show this: In this example, we can see that after executing 0x555555555171 <main+8> sub rsp, 0x10 0x555555555175 <main+12> mov edi, 0x100 The registers rsp and rdi are tainted (modified). A convenient option is --output-file /path/to/file.py that will generate a pure Python script embedding your current execution context, ready to be re-used outside GEF!! This can be useful for dealing with obfuscation or solve crackmes if powered with a SMT for instance.","title":"emulate"},{"location":"commands/unicorn-emulate/#command-unicorn-emulate","text":"If you have installed unicorn emulation engine and its Python bindings, GEF integrates a new command to emulate instructions of your current debugging context ! This unicorn-emulate command (or its alias emu ) will replicate the current memory mapping (including the page permissions) for you, and by default (i.e. without any additional argument), it will emulate the execution of the instruction about to be executed (i.e. the one pointed by $pc ). Furthermore the command will print out the state of the registers before and after the emulation. Use -h for help: gef\u27a4 emu -h For example, the following command will emulate only the next 2 instructions: gef\u27a4 emu 2 And show this: In this example, we can see that after executing 0x555555555171 <main+8> sub rsp, 0x10 0x555555555175 <main+12> mov edi, 0x100 The registers rsp and rdi are tainted (modified). A convenient option is --output-file /path/to/file.py that will generate a pure Python script embedding your current execution context, ready to be re-used outside GEF!! This can be useful for dealing with obfuscation or solve crackmes if powered with a SMT for instance.","title":"Command unicorn-emulate"},{"location":"commands/windbg/","text":"WinDbg compatibility layer This plugin is a set of commands, aliases and extensions to mimic some of the most common WinDbg commands into GEF. Commands hh - open GEF help in web browser sxe (set-exception-enable): break on loading libraries tc - trace to next call pc - run until call. g - go. u - disassemble. x - search symbol. r - register info Settings gef.use-windbg-prompt - set to True to change the prompt like 0:000 \u27a4 Aliases da : display s dt : pcustom dq : hexdump qword dd : hexdump dword dw : hexdump word db : hexdump byte eq : patch qword ed : patch dword ew : patch word eb : patch byte ea : patch string dps : dereference bp : break bl : \"info breakpoints bd : \"disable breakpoints bc : \"delete breakpoints be : \"enable breakpoints tbp : tbreak s : grep pa : advance kp : \"info stack ptc : finish uf : disassemble","title":"windbg"},{"location":"commands/windbg/#windbg-compatibility-layer","text":"This plugin is a set of commands, aliases and extensions to mimic some of the most common WinDbg commands into GEF.","title":"WinDbg compatibility layer"},{"location":"commands/windbg/#commands","text":"hh - open GEF help in web browser sxe (set-exception-enable): break on loading libraries tc - trace to next call pc - run until call. g - go. u - disassemble. x - search symbol. r - register info","title":"Commands"},{"location":"commands/windbg/#settings","text":"gef.use-windbg-prompt - set to True to change the prompt like 0:000 \u27a4","title":"Settings"},{"location":"commands/windbg/#aliases","text":"da : display s dt : pcustom dq : hexdump qword dd : hexdump dword dw : hexdump word db : hexdump byte eq : patch qword ed : patch dword ew : patch word eb : patch byte ea : patch string dps : dereference bp : break bl : \"info breakpoints bd : \"disable breakpoints bc : \"delete breakpoints be : \"enable breakpoints tbp : tbreak s : grep pa : advance kp : \"info stack ptc : finish uf : disassemble","title":"Aliases"}]}